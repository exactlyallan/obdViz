// Data parser
// For data generated by OBD fusion app
// https://www.obdsoftware.net/software/obdfusion


// Load Data file via http://papaparse.com/
var Papa = require('papaparse')


// Papa parse file
var papaFile = function(input, callback) {
    // if file selected
    if (input.files.length > 0) {

    	//var status = document.querySelector('.chrom-stats')
		//status.innerHTML = "Loading Data..."

        Papa.parse(input.files[0], {
            delimiter: "", // auto-detect
            newline: "", // auto-detect
            quoteChar: '"',
            comments: "#",
            dynamicTyping: true, // get ints etc
            header: false, // easier to parse array
            skipEmptyLines: true,
            error: function(err, file, inputElem, reason) {
                console.log("File loading error:", err, reason)
                callback( null )
            },
            complete: function(results) {
                console.log("File loaded: ", results);
               	callback( results )
            }
        })
    }

}

// Map parsed results to array useable for viz
var parseDatafile = function(rawData) {

	// if error 
	if(rawData === null){
		return (null)
	}2

    // data
    var dataObj = {}

    // data max and min concurrently
    // PSA: 65536 args https://bugs.webkit.org/show_bug.cgi?id=80797
    var dataObjMaxMin = {}

    // collect headers and remove white space
    var headerAry = rawData.data[0].map((d,i)=>{
        return(d.trim())
    })

    // add keys
    dataObj.headers = headerAry;
    for(var j=0; j<headerAry.length; j++){
        dataObj[headerAry[j]] = [];
        dataObjMaxMin[headerAry[j]] = {max:0, min:0}
    }

    // collect data, loop through each row skipping first header row
    for(var i=1; i<rawData.data.length; i++){

        // loop through each col, checking for max and min
        for(var k=0; k<headerAry.length; k++){
            dataObjMaxMin[headerAry[k]].max = Math.max(dataObjMaxMin[headerAry[k]].max, rawData.data[i][k])
            dataObjMaxMin[headerAry[k]].min = Math.min(dataObjMaxMin[headerAry[k]].min, rawData.data[i][k])
            
            dataObj[headerAry[k]].push(rawData.data[i][k])
        }

    }

    return ({data:dataObj, maxmin:dataObjMaxMin})

}


// export
module.exports = {
	papaFile: papaFile,
	parseDatafile: parseDatafile
}


